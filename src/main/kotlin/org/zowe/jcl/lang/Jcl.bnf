/*
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright IBA Group 2023
 */

{
  parserClass="org.zowe.jcl.lang.parser.JclParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Jcl"
  psiImplClassSuffix="Impl"
  psiPackage="org.zowe.jcl.lang.psi"
  psiImplPackage="org.zowe.jcl.lang.psi.impl"

  elementTypeHolderClass="org.zowe.jcl.lang.psi.JclTypes"
  elementTypeClass="org.zowe.jcl.lang.psi.JclElementType"
  tokenTypeClass="org.zowe.jcl.lang.psi.JclTokenType"
}

jclFile ::= JCL_SYNTAX*

//TODO Nikita: think how to rework SN
private JCL_SYNTAX ::= (JCL_LINE|NULL_STATEMENT|COMMENT|SEQUENCE_NUMBERS|CRLF)

//private JCL_LINE ::= JCL_LINE_START SEQUENCE_NUMBERS

JCL_LINE ::= ((LINE_START OPERATOR_FULL_NAME? OPERATOR PARAMS INSTREAM? COMMENT? SEQUENCE_NUMBERS?) | (LINE_START OPERATOR_FULL_NAME? OPERATOR COMMENT? SEQUENCE_NUMBERS?) | LINE_CONTINUATION | IF_CONSTR)

OPERATOR_FULL_NAME ::= OPERATOR_NAME (DOT OPERATOR_OVERRIDE_NAME)?

INSTREAM_LINE ::= ((LINE_START OPERATOR PARAMS?) | LINE_CONTINUATION)

//TODO Nikita: think how to rework SN
LINE_CONTINUATION ::= (LINE_START PARAMS COMMENT? SEQUENCE_NUMBERS?) | SEQUENCE_NUMBERS

NULL_STATEMENT ::= LINE_START SEQUENCE_NUMBERS?


PARAMS ::= (PARAM? PARAM_DELIM)* ((COMMENT? SEQUENCE_NUMBERS? LINE_CONTINUATION) | (PARAM COMMENT? SEQUENCE_NUMBERS?))

PARAM ::= (KEY_VALUE_PARAM | TEMPLATE_PARAM | STRING | TUPLE | PARAM_KEY | INSTREAM_START)

KEY_VALUE_PARAM ::= (PARAM_KEY (PARAM_EQUALS PARAM_VALUE?)*)

PARAM_VALUE ::= STRING | TUPLE | SIMPLE_VALUE

TUPLE ::= TUPLE_START TUPLE_INNER_CONTENT? TUPLE_END

TUPLE_INNER_CONTENT ::= (TUPLE_PARAM? PARAM_EQUALS? TUPLE_PARAM? TUPLE_PARAM_DELIM COMMENT? SEQUENCE_NUMBERS? LINE_START?)* TUPLE_PARAM? PARAM_EQUALS? TUPLE_PARAM?

TUPLE_PARAM ::= STRING | TUPLE | SIMPLE_VALUE


INSTREAM ::= INSTREAM_CONTENT (INSTREAM_END SEQUENCE_NUMBERS?)?

INSTREAM_CONTENT ::= (INSTREAM_LINE | ((INSTREAM_TEXT | COMMENT) SEQUENCE_NUMBERS?))*


STRING ::= STRING_BRACKET STRING_INNER_CONTENT? STRING_BRACKET
STRING_INNER_CONTENT ::= STRING_CONTENT (SEQUENCE_NUMBERS? LINE_START STRING_INNER_CONTENT)*


IF_CONSTR ::= LINE_START OPERATOR_FULL_NAME? IF_BODY JCL_LINE* END_IF_CONSTR
IF_BODY ::= IF_OPERATOR IF_CONDITION THEN_OPERATOR COMMENT? SEQUENCE_NUMBERS?
END_IF_CONSTR ::= LINE_START OPERATOR_FULL_NAME? END_IF COMMENT? SEQUENCE_NUMBERS?
IF_CONDITION ::= IF_VALUE (IF_CONDITION_OPERATOR LINE_START? IF_VALUE)*
IF_VALUE ::= IF_OPERATOR_NOT? ((PROPERTY_NAME (DOT PROPERTY_NAME)*) | (IF_CONDITION_START IF_CONDITION IF_CONDITION_END))
