{
  parserClass="eu.ibagroup.jcl.lang.parser.JclParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Jcl"
  psiImplClassSuffix="Impl"
  psiPackage="eu.ibagroup.jcl.lang.psi"
  psiImplPackage="eu.ibagroup.jcl.lang.psi.impl"

  elementTypeHolderClass="eu.ibagroup.jcl.lang.psi.JclTypes"
  elementTypeClass="eu.ibagroup.jcl.lang.psi.JclElementType"
  tokenTypeClass="eu.ibagroup.jcl.lang.psi.JclTokenType"
}

jclFile ::= JCL_SYNTAX*

private JCL_SYNTAX ::= (JCL_LINE|COMMENT|CRLF)

//private JCL_LINE ::= JCL_LINE_START SEQUENCE_NUMBERS

JCL_LINE ::= ((LINE_START OPERATOR_FULL_NAME? OPERATOR PARAMS INSTREAM?) | (LINE_START OPERATOR_FULL_NAME? OPERATOR SEQUENCE_NUMBERS?) | LINE_CONTINUATION)

OPERATOR_FULL_NAME ::= OPERATOR_NAME (OPERATOR_NAME_DELIM OPERATOR_OVERRIDE_NAME)?

INSTREAM_LINE ::= ((LINE_START OPERATOR PARAMS?) | LINE_CONTINUATION)

LINE_CONTINUATION ::= LINE_START PARAMS


PARAMS ::= PARAM (PARAM_DELIM PARAM)* ((PARAM_DELIM SEQUENCE_NUMBERS? LINE_CONTINUATION) | SEQUENCE_NUMBERS?)

PARAM ::= (KEY_VALUE_PARAM | TEMPLATE_PARAM | STRING | PARAM_KEY | INSTREAM_START)

KEY_VALUE_PARAM ::= (PARAM_KEY PARAM_EQUALS PARAM_VALUE)

PARAM_VALUE ::= STRING | TUPLE | SIMPLE_VALUE

TUPLE ::= TUPLE_START TUPLE_INNER_CONTENT TUPLE_END

TUPLE_INNER_CONTENT ::= TUPLE_PARAM (TUPLE_PARAM_DELIM SEQUENCE_NUMBERS? LINE_START? TUPLE_PARAM)*

TUPLE_PARAM ::= STRING | TUPLE | SIMPLE_VALUE


INSTREAM ::=  INSTREAM_CONTENT (INSTREAM_END SEQUENCE_NUMBERS?)?

INSTREAM_CONTENT ::= (INSTREAM_LINE | (( INSTREAM_TEXT | COMMENT) SEQUENCE_NUMBERS?))*


STRING ::= STRING_BRACKET STRING_INNER_CONTENT? STRING_BRACKET
STRING_INNER_CONTENT ::= STRING_CONTENT (SEQUENCE_NUMBERS? LINE_START STRING_INNER_CONTENT)*